// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=book -destination=service_mock_test.go
//

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	book "github.com/erizkiatama/gotu-assignment/internal/model/book"
	gomock "go.uber.org/mock/gomock"
)

// MockbookReposistory is a mock of bookReposistory interface.
type MockbookReposistory struct {
	ctrl     *gomock.Controller
	recorder *MockbookReposistoryMockRecorder
}

// MockbookReposistoryMockRecorder is the mock recorder for MockbookReposistory.
type MockbookReposistoryMockRecorder struct {
	mock *MockbookReposistory
}

// NewMockbookReposistory creates a new mock instance.
func NewMockbookReposistory(ctrl *gomock.Controller) *MockbookReposistory {
	mock := &MockbookReposistory{ctrl: ctrl}
	mock.recorder = &MockbookReposistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookReposistory) EXPECT() *MockbookReposistoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockbookReposistory) GetAll(ctx context.Context) (book.BookModels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(book.BookModels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockbookReposistoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockbookReposistory)(nil).GetAll), ctx)
}

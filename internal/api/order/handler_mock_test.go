// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	order "github.com/erizkiatama/gotu-assignment/internal/model/order"
	gomock "go.uber.org/mock/gomock"
)

// MockorderService is a mock of orderService interface.
type MockorderService struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceMockRecorder
}

// MockorderServiceMockRecorder is the mock recorder for MockorderService.
type MockorderServiceMockRecorder struct {
	mock *MockorderService
}

// NewMockorderService creates a new mock instance.
func NewMockorderService(ctrl *gomock.Controller) *MockorderService {
	mock := &MockorderService{ctrl: ctrl}
	mock.recorder = &MockorderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderService) EXPECT() *MockorderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockorderService) CreateOrder(ctx context.Context, userID int64, req order.CreateOrderRequest) (*order.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, req)
	ret0, _ := ret[0].(*order.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockorderServiceMockRecorder) CreateOrder(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockorderService)(nil).CreateOrder), ctx, userID, req)
}

// DetailOrder mocks base method.
func (m *MockorderService) DetailOrder(ctx context.Context, userID, orderID int64) (*order.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(*order.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailOrder indicates an expected call of DetailOrder.
func (mr *MockorderServiceMockRecorder) DetailOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailOrder", reflect.TypeOf((*MockorderService)(nil).DetailOrder), ctx, userID, orderID)
}

// ListOrder mocks base method.
func (m *MockorderService) ListOrder(ctx context.Context, userID int64) ([]order.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrder", ctx, userID)
	ret0, _ := ret[0].([]order.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder.
func (mr *MockorderServiceMockRecorder) ListOrder(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockorderService)(nil).ListOrder), ctx, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -package=book -destination=handler_mock_test.go
//

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	book "github.com/erizkiatama/gotu-assignment/internal/model/book"
	gomock "go.uber.org/mock/gomock"
)

// MockbookService is a mock of bookService interface.
type MockbookService struct {
	ctrl     *gomock.Controller
	recorder *MockbookServiceMockRecorder
}

// MockbookServiceMockRecorder is the mock recorder for MockbookService.
type MockbookServiceMockRecorder struct {
	mock *MockbookService
}

// NewMockbookService creates a new mock instance.
func NewMockbookService(ctrl *gomock.Controller) *MockbookService {
	mock := &MockbookService{ctrl: ctrl}
	mock.recorder = &MockbookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookService) EXPECT() *MockbookServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockbookService) List(ctx context.Context) (book.BookResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(book.BookResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockbookServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockbookService)(nil).List), ctx)
}
